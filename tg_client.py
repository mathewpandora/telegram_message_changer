import asyncio
import os
from xml.sax.saxutils import escape

from dotenv import load_dotenv
from telethon import TelegramClient, events
from giga_client import GigaChatTextCorrector
from logger_config import logger

load_dotenv()


API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
PHONE_NUMBER = os.getenv("PHONE_NUMBER")

client = TelegramClient("sessions/my_session", API_ID, API_HASH)


def change_message(message: str) -> str:
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
    
    if not message or not message.strip():
        logger.info("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return message
    
    if len(message.strip()) < 2:
        logger.info("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return message
    
    try:
        giga_client = GigaChatTextCorrector()
        response = giga_client.send_request(message)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GigaChat: {response}")
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return message


@client.on(events.NewMessage(outgoing=True))
async def handler(event):
    original = event.raw_text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {original}")
    
    if not original or not original.strip():
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return
    
    try:
        modified = change_message(original)

        if modified != original:
            await event.delete()
            await client.send_message(event.chat_id, modified)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞: {modified}")
        else:
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
        await client.start(phone=PHONE_NUMBER)
        logger.info("–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç–æ—á–∫–∞–º–∏ üòé")
        await client.run_until_disconnected()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
